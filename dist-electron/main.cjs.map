{"version":3,"file":"main.cjs","sources":["../electron/main.ts"],"sourcesContent":["import { app, BrowserWindow, ipcMain } from \"electron\";\nimport fs from \"node:fs\";\nimport { fileURLToPath } from \"node:url\";\nimport path from \"node:path\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\n// The built directory structure\n//\n// â”œâ”€â”¬â”€â”¬ dist\n// â”‚ â”‚ â””â”€â”€ index.html\n// â”‚ â”‚\n// â”‚ â”œâ”€â”¬ dist-electron\n// â”‚ â”‚ â”œâ”€â”€ main.js\n// â”‚ â”‚ â””â”€â”€ preload.mjs\n// â”‚\nprocess.env.APP_ROOT = path.join(__dirname, \"..\");\n\n// ðŸš§ Use ['ENV_NAME'] avoid vite:define plugin - Vite@2.x\nexport const VITE_DEV_SERVER_URL = process.env[\"VITE_DEV_SERVER_URL\"];\nconst DEV_SERVER_URL =\n  VITE_DEV_SERVER_URL || process.env[\"ELECTRON_RENDERER_URL\"];\nconst isDev = !!DEV_SERVER_URL;\nexport const MAIN_DIST = path.join(process.env.APP_ROOT, \"dist-electron\");\nexport const RENDERER_DIST = path.join(process.env.APP_ROOT, \"dist\");\n\nprocess.env.VITE_PUBLIC = VITE_DEV_SERVER_URL\n  ? path.join(process.env.APP_ROOT, \"public\")\n  : RENDERER_DIST;\n\nlet win: BrowserWindow | null;\n\nfunction createWindow() {\n  const preloadPath = path.join(__dirname, \"preload.mjs\");\n  if (isDev) {\n    console.log(\"[main] VITE_DEV_SERVER_URL =\", VITE_DEV_SERVER_URL);\n    console.log(\n      \"[main] ELECTRON_RENDERER_URL =\",\n      process.env[\"ELECTRON_RENDERER_URL\"]\n    );\n    console.log(\"[main] __dirname =\", __dirname);\n    console.log(\n      \"[main] preload path =\",\n      preloadPath,\n      \"exists =\",\n      fs.existsSync(preloadPath)\n    );\n    console.log(\"[main] RENDERER_DIST =\", RENDERER_DIST);\n  }\n  const indexCandidates = [\n    path.join(RENDERER_DIST, \"index.html\"),\n    // When dist is copied via extraResources\n    path.join(process.resourcesPath, \"dist\", \"index.html\"),\n    // Common electron-vite/electron-builder locations\n    path.join(process.resourcesPath, \"app\", \"dist\", \"index.html\"),\n    path.join(process.resourcesPath, \"app.asar\", \"dist\", \"index.html\"),\n    path.join(process.resourcesPath, \"app.asar.unpacked\", \"dist\", \"index.html\"),\n  ];\n  const resolvedIndex = indexCandidates.find((p) => {\n    const ok = fs.existsSync(p);\n    if (isDev) console.log(\"[main] candidate index:\", p, \"exists =\", ok);\n    return ok;\n  });\n  const publicCandidates = [\n    // Dev/public or built dist\n    RENDERER_DIST,\n    path.join(process.resourcesPath, \"dist\"),\n    path.join(process.resourcesPath, \"app\", \"dist\"),\n    path.join(process.resourcesPath, \"app.asar\", \"dist\"),\n    path.join(process.resourcesPath, \"app.asar.unpacked\", \"dist\"),\n  ];\n  const resolvedPublic = publicCandidates.find((dir) => fs.existsSync(dir));\n  win = new BrowserWindow({\n    width: 1200,\n    height: 800,\n    frame: false,\n    titleBarStyle: \"hidden\",\n    // Use PNG icon for Linux/Ubuntu (SVG not supported for BrowserWindow icon)\n    icon: resolvedPublic ? path.join(resolvedPublic, \"logo.png\") : path.join(process.env.VITE_PUBLIC || \"\", \"logo.png\"),\n    webPreferences: {\n      // Be explicit to avoid surprises\n      contextIsolation: true,\n      nodeIntegration: false,\n      sandbox: false,\n      preload: preloadPath,\n    },\n  });\n\n  // Test active push message to Renderer-process.\n  win.webContents.on(\"did-finish-load\", () => {\n    win?.webContents.send(\"main-process-message\", new Date().toLocaleString());\n  });\n  if (isDev) {\n    win.webContents.on(\"did-fail-load\", (_event, errorCode, errorDescription, validatedURL) => {\n      console.error(\"[main] did-fail-load:\", { errorCode, errorDescription, validatedURL });\n    });\n    win.webContents.on(\"render-process-gone\", (_event, details) => {\n      console.error(\"[main] render-process-gone:\", details);\n    });\n  }\n\n  if (DEV_SERVER_URL) {\n    win.loadURL(DEV_SERVER_URL);\n    // Open devTools in dev mode\n    win.webContents.openDevTools();\n  } else {\n    const targetIndex = resolvedIndex || path.join(RENDERER_DIST, \"index.html\");\n    if (isDev) console.log(\"[main] loading index:\", targetIndex);\n    win.loadFile(targetIndex).catch((err) => {\n      if (isDev) console.error(\"[main] loadFile error:\", err);\n    });\n  }\n}\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on(\"window-all-closed\", () => {\n  if (process.platform !== \"darwin\") {\n    app.quit();\n    win = null;\n  }\n});\n\napp.on(\"activate\", () => {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow();\n  }\n});\n\napp.whenReady().then(() => {\n  createWindow();\n\n  ipcMain.on(\"minimize-window\", () => {\n    win?.minimize();\n  });\n\n  ipcMain.on(\"maximize-window\", () => {\n    if (win?.isMaximized()) {\n      win?.unmaximize();\n    } else {\n      win?.maximize();\n    }\n  });\n\n  ipcMain.on(\"close-window\", () => {\n    win?.close();\n  });\n});\n"],"names":["__dirname","fileURLToPath","BrowserWindow","app","ipcMain"],"mappings":"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"}