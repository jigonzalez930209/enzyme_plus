{"version":3,"file":"preload.mjs","sources":["../electron/preload.ts"],"sourcesContent":["import { ipcRenderer, contextBridge } from 'electron'\r\n// --------- Expose some API to the Renderer process ---------\r\ncontextBridge.exposeInMainWorld('electronAPI', {\r\n  on(...args: Parameters<typeof ipcRenderer.on>) {\r\n    const [channel, listener] = args\r\n    return ipcRenderer.on(channel, (event, ...args) => listener(event, ...args))\r\n  },\r\n  off(...args: Parameters<typeof ipcRenderer.off>) {\r\n    const [channel, ...omit] = args\r\n    return ipcRenderer.off(channel, ...omit)\r\n  },\r\n  send(...args: Parameters<typeof ipcRenderer.send>) {\r\n    const [channel, ...omit] = args\r\n    return ipcRenderer.send(channel, ...omit)\r\n  },\r\n  invoke(...args: Parameters<typeof ipcRenderer.invoke>) {\r\n    const [channel, ...omit] = args\r\n    return ipcRenderer.invoke(channel, ...omit)\r\n  },\r\n\r\n  // You can expose other APTs you need here.\r\n  minimizeWindow: () => ipcRenderer.send('minimize-window'),\r\n  maximizeWindow: () => ipcRenderer.send('maximize-window'),\r\n  closeWindow: () => ipcRenderer.send('close-window'),\r\n})\r\n\r\n// Simple flag to detect Electron from the renderer\r\ncontextBridge.exposeInMainWorld('isElectron', true)\r\n"],"names":["args"],"mappings":";AAEA,cAAc,kBAAkB,eAAe;AAAA,EAC7C,MAAM,MAAyC;AAC7C,UAAM,CAAC,SAAS,QAAQ,IAAI;AAC5B,WAAO,YAAY,GAAG,SAAS,CAAC,UAAUA,UAAS,SAAS,OAAO,GAAGA,KAAI,CAAC;AAAA,EAC7E;AAAA,EACA,OAAO,MAA0C;AAC/C,UAAM,CAAC,SAAS,GAAG,IAAI,IAAI;AAC3B,WAAO,YAAY,IAAI,SAAS,GAAG,IAAI;AAAA,EACzC;AAAA,EACA,QAAQ,MAA2C;AACjD,UAAM,CAAC,SAAS,GAAG,IAAI,IAAI;AAC3B,WAAO,YAAY,KAAK,SAAS,GAAG,IAAI;AAAA,EAC1C;AAAA,EACA,UAAU,MAA6C;AACrD,UAAM,CAAC,SAAS,GAAG,IAAI,IAAI;AAC3B,WAAO,YAAY,OAAO,SAAS,GAAG,IAAI;AAAA,EAC5C;AAAA;AAAA,EAGA,gBAAgB,MAAM,YAAY,KAAK,iBAAiB;AAAA,EACxD,gBAAgB,MAAM,YAAY,KAAK,iBAAiB;AAAA,EACxD,aAAa,MAAM,YAAY,KAAK,cAAc;AACpD,CAAC;AAGD,cAAc,kBAAkB,cAAc,IAAI;"}